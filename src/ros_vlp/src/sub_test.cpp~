#include <ros/ros.h>
#include <std_msgs/Float64.h>
#include <std_srvs/Empty.h>
#include <math.h>

void subscribeCallback(const std_msgs::Float64& msg0)
{
	ROS_INFO_STREAM("subscribe callback");
	ROS_INFO_STREAM(msg0.data);

	//sleep(1);	
}

int main(int argc, char **argv){
	ros::init(argc, argv, "clt_test");
	ros::NodeHandle nh0;
	ros::NodeHandle nh1;
	
	ros::ServiceClient testClient = nh0.serviceClient<std_srvs::Empty>("gps_data");
	std_srvs::Empty::Request req;
	std_srvs::Empty::Response resp;

	//ros::Publisher pub = nh.advertise<std_msgs::Float64>("test_sin",1000);
	ros::Rate rate(10);

	ros::Subscriber sub = nh1.subscribe("test_return",1,&subscribeCallback);
	
	while(ros::ok()){
		std_msgs::Float64 msg;
	        double d;
		/*for(int i=0;i<20;i++){
			msg.data = sin(3.14159 / 10*i);
			ROS_INFO_STREAM(msg.data);
			pub.publish(msg);
			rate.sleep();
			}*/
		bool result = testClient.call(req, resp);
		if(result){
			ROS_INFO_STREAM("Recieve response");
       		}else{
			ROS_INFO_STREAM("Error");
		}
		ros::spinOnce();
	}
	return 0;
}

	
